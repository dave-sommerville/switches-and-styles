@charset "utf-8";
/*-------------------------------------------------->
ROOTS
*Optional

My Preferred method for establishing color palletes
and various other meassurements 
<---------------------------------------------------*/


:root {
	--clr-drk-1: #777da7;
	--clr-drk-2: #814b4e;
	--clr-accent-1: #fac05e;
	--clr-accent: #fac05e;
	--clr-accent-2: #f79d84;
	--clr-blue: #3fa7d6;
	--clr-orange: #ee6352;
	--clr-green: #59cd90;
	--clr-text: #fefefe;
}
/*-------------------------------------------------->
UTILITY CLASSES
*Optional

I typically use utility classes sparingly and depending 
on the project. These are some of my most used and 
all needed for the project. 
<---------------------------------------------------*/


.flex{
	display: flex;
}
.f-col {
	flex-direction: column;
}

.circle {
	border-radius: 50%;
}


/*-------------------------------------------------->
MAIN DOCUMENT STYLES 
*optional 


<---------------------------------------------------*/

body {		/* Personally, I really like the Poppins font family*/
	font-family: "Poppins", Arial, sans-serif;
	color: #fefefe;
	background-color: var(--clr-drk-1);
}

h1 {
	width: 100%; 
	font-size: clamp(2rem 3.5svw 3.5rem);
	/* 
		Clamp is a relatively new CSS feature to assist with responsive 
		text sizing. Shorthand size (minimum, preferred, maximum)
	*/	
	color: var(--app-text-clr);
	position: fixed;
	top: 2svh;
	text-align: center;
}

h2 {
	width: 100%;
	font-size: clamp(1.6rem 2.5svw 2.5rem);
	color: var(--clr-accent-2);
	position: fixed;
	top: 4svh;
	text-align: center;

}

h3 {
	/* color: ; */
	font-size: clamp(1.4rem 1.8svw 2rem);
	margin: 25px 0;
}

main {
	justify-content: center;
	align-items: center;
	position: relative;
	z-index: 0;
}
/* 	The relative and fixed positions of main and headings are superflous
		I simply wanted the title removed from the flow
*/
/*-------------------------------------------------->
TARGET SHAPE
- Shape wrapper to maintain static elements 
- Width using svw to ensure responsiveness
- Consequently aspect ratio and height auto are used to
	maintain shape integrity
- Starting colour the middle radio display (no border) *optional

<---------------------------------------------------*/


.shape-container {
	height: 50svh;
	width: 100%;
	justify-content: center;
	align-items: center;
}

.target-shape {
	width: 18svw;
	aspect-ratio: 1 /1;
	height: auto;
	background-color: var(--clr-orange);
}

/*-------------------------------------------------->
TOGGLE CONTROL
- Toggle controls offer choice of a Boolean
		- "This or that" choice
- Very popular toggle display style
- Actually a disguised checkbox 
- Using absolute position and JavaScript to accomplish 
	a smooth effect

<---------------------------------------------------*/

/* Toggle wrapper styles for page structure */
.toggle-display, .radio-display, .slider-display {
	width: 50svw;
	height: 15svh;
	background-color: var(--clr-drk-2);
	text-align: center;
}

.toggle-container {
  display: inline-block;
  position: relative;
  width: 70px;
  height: 40px;
}

/* Hidden checkbox */
.toggle-checkbox {
  display: none;
}

/* Label (outer oval) */
.toggle-label {
  display: block;
  background-color: var(--clr-accent-1);
  border-radius: 30px;
  width: 100%;
  height: 100%;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

/* Ball (inner circle) */
.toggle-ball {
  position: absolute;
  top: 3px;
  left: 3px;
  width: 33px;
  height: 33px;
  background-color: var(--clr-drk-1);
  transition: transform 0.3s ease;
}

/* Translation with absolute positioning to give the toggle appearnace */
.toggle-checkbox:checked + .toggle-label {
  background-color: var(--clr-green); 
}

.toggle-checkbox:checked + .toggle-label .toggle-ball {
  transform: translateX(31px);
}

/*-------------------------------------------------->
RADIO CONTROLS
- Radio Controls (in this case) offer broad but exclusive choice
		- "Only one of any of these" choice 
- Basic html element
- Here they are decorated using css to offer a sleeker UI

<---------------------------------------------------*/
/* Selectable input */
.radio-buttons {
  display: flex;
  gap: 20px;
  justify-content: center;
  margin-top: 20px;
}

label {
  display: block;
  text-align: center;
}

/* Input style, showing which colour display has been chosen */
input[type="radio"] {
  display: none; 
}

input[type="radio"]:checked + .color-display {
  border: 0.6px solid var(--clr-accent-1); 
}

/* Colour samples themselves used as inputs to be selected */
.color-display {
  width: 40px;
  height: 40px;
  display: flex;
  justify-content: center; 
  align-items: center; 
	cursor: pointer;
}

.one {
	background-color: var(--clr-blue);
}
.two {
	background-color: var(--clr-orange);
}
.three {
	background-color: var(--clr-green);
}



/*-------------------------------------------------->
SLIDER CONTROL
- Slider controls offer full spectrum of options, inferior for discrete units
	- "Anywhere within here" choice 
- Basic HTML element
- Here we use JavaScript and a calcuation to adjust size
- Webkits needed for proper browser support 
	-And to decorate "thumb"

<---------------------------------------------------*/

/* Slider container */
.slider-container {
  width: 30svw;
  margin: 20px auto;
  text-align: center;
}

.slider { 
  -webkit-appearance: none; 
  width: 100%;					
  height: 10px;
  border-radius: 5px;
  background: var(--clr-accent-1);
  outline: none;
  transition: background-color 0.3s ease;
  margin-bottom: 10px;
}


/* "Thumb" appearance */
.slider::-webkit-slider-thumb {
  -webkit-appearance: none; 
  appearance: none;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: var(--clr-drk-1); 
  cursor: pointer;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  transition: background-color 0.3s ease;
}

.slider::-moz-range-thumb {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: var(--clr-drk-1);
  cursor: pointer;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

/* Slider styles for hover/active */
.slider:active {
  background: var(--clr-accent-2);
}
